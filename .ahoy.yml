ahoyapi: v2
commands:
  build:
    usage: Build ahoy with a version automatically set.
    cmd: |
      set -e
      COMMIT=$(git rev-parse --short HEAD)
      VERSION=$(git describe --tag $COMMIT)
      go build -ldflags "-X main.version=$VERSION"
      echo "Built ahoy version $VERSION"
  install:
    cmd: "go install"
    usage: Build ahoy using go install.
  test:
    usage: Run automated tests
    cmd: |
      FAIL=false
      TESTS=(
        'go vet'
        'go test -v -race '
        'golint -set_exit_status'
      )
      for i in "${TESTS[@]}"; do
        printf "\n=== TEST: $i ===\n\n"
        $i
        if [ $? -ne 0 ]; then
          FAIL=true
        fi
      done
      printf "\n=== RESULT ===\n\n"
      # If any tests failed, then fail.
      if [ $FAIL == true ]; then
        echo "Some tests failed."
        exit 1
      else
        echo "All tests passed."

      fi
  godep:
    cmd: |
      godep="$(which godep)"
      if [ ! "$godep" ]; then
        echo "godep not found, installing it first using:"
        echo "OSX: brew install godep"
        echo "other: go get github.com/tools/godep"
      else
        godep {{args}}
      fi
  gofmt:
    usage: Clean up go code per code standards.
    cmd: gofmt -w *.go
  build-docs:
    usage: Build the docs.
    cmd: cd docs && make html
